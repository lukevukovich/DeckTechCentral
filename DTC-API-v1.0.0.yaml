openapi: 3.0.3
info:
  title: DeckTechCentral - OpenAPI 3.0
  description: |-
    This is an api for the management, creation, and viewing of decks for the service known as
    DeckTechCentral
  contact: {}
  version: 1.0.11
externalDocs:
  description: Development Progress of DeckTechCentral
  url: https://paulshriner.github.io/
servers:
  - url: TODO
tags:
  - name: deck
    description: Information of decks
  - name: user
    description: User information
  - name: card
    description: card information
    externalDocs:
      description: card information gain from
      url: https://scryfall.com/
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /deck:
    parameters:
      - name: name
        in: query
        description: name of deck
        required: false
        schema:
          type: string
      - name: cards
        in: query
        description: cards to include
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: format of the deck
        required: false
        schema:
          type: string
      - name: commander
        in: query
        description: commander of a deck
        required: false
        schema:
          type: string
  /deck/{deckId}:
    parameters:
       - name: deckId
         in: path
         description: a guid of the deck that is wanted
         required: true
         schema:
          type: string
    get:
      tags:
       - deck
      summary: Get the specified deck
      responses:
        '200':
          description: deck was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
        '400':
          description: Invalid deckId supplied
        '404':
          description: Deck not found
      security:
       - deckmanagement_auth:
          - read:decks
    put:
      tags:
       - deck
      summary: Update a specified deck
      requestBody:
        description: Deck object to update using
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        default:
          description: deck successfully updated
        '401':
          description: Unauthorized
  /decks/{userName}:
    parameters:
      - name: userName
        in: path
        description: the username of the user to see the decks
        required: true
        schema:
          type: string
    get:
      tags:
        - deck
      summary: Get all visible decks from the user
      responses:
        '200':
          description: decks were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckSearchResponse'
  /deck/search:
    parameters:
      - name: name
        in: query
        description: A fuzzy search based on the name of the deck
        required: false
        schema:
          type: string
      - name: format
        in: query
        description: the format the deck should be in
        required: false
        schema:
          type: string
      - name: commander_1
        in: query
        description: the commander of a deck list
        required: false
        schema:
          type: string
      - name: commander_2
        in: query
        description: second commander of the deck
        required: false
        schema: 
          type: string
      - name: sortBy
        in: query
        description: how to sort the decks uses name by default, can be sorted by name, likes, views, and creators
        required: false
        schema:
          type: string
    get:
      tags:
        - deck
      summary: Search for deck
      responses:
        '200':
          description: decks were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckSearchResponse'
  /deck/like/{deckId}:
    parameters:
       - name: deckId
         in: path
         description: a guid of the deck that is wanted
         required: true
         schema:
          type: string
    patch:
      tags:
        - deck
      summary: likes or removes like from a deck
      responses:
        '200':
          description: deck was liked/disliked
        '404':
          description: deck not found
  /deck/like/{deckId}/{userId}:
    parameters:
      - name: deckId
        in: path
        description: a guid of the deck that is wanted
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: a guid of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - deck
      summary: returns if a user likes a given deck
      responses:
        '200': 
          description: deck and user found
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: either deck does not exist       
  /card/{cardId}:
    parameters:
      - name: cardId
        in: path
        description: a guid of the card that is wanted
        required: true
        schema:
          type: string
    get:
      tags:
        - card
      summary: Get the specified card
      responses:
        '200':
          description: card was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid cardId supplied
        '404':
          description: Card not found
  /card/bulk:
    parameters:
      - name: cardArray
        in: header
        description: an array of guids for cards that are wanted
        required: true
        schema:
          type: array
          items:
            type: string
    get:
      tags: 
        - card
      summary: Get a list of cards
      responses:
        '200':
          description: cards were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
  /card/search:
    parameters:
      - name: q
        in: query
        description: a full text query using percent encododing using scryfall syntax see https://scryfall.com/docs/syntax for more details
        required: true
        schema:
          type: string
          maxLength: 1000
      - name: page
        in: query
        description: the page number for cards to display assumed to be first page if not given
        required: false
        schema:
          type: number
          minimum: 0
      - name: pageSize
        in: query
        description: the maximum number of cards to display per page
        required: false
        schema:
          type: number
          minimum: 1
    get:
      tags:
       - card
      summary: search for cards
      responses:
        '200':
          description: cards found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
  /deck/cards/{deckId}:
    parameters:
      - name: deckId
        in: path
        description: Get all cards information for cards listed in specified deck
        required: true
        schema:
          type: string
    get:
      tags:
        - deck
      summary: Get the list of cards from specified deck
      responses:
        '200':
          description: cards were found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
      security:
        - deckmanagement_auth:
          - read:decks
components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
        - userStatus
      properties:
        id:
          type: string
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        userStatus:
          type: string
          description: User Status
          example: 'moderator'
    DeckSearchResponse:
      type: object
      required:
       - id
       - name
       - likes
       - dislikes
       - views
       - editors
       - created_date
       - modified_date
      properties:
        id:
          type: string
          format: guid
          example: '1103efb6-b3db-409b-951f-896efa60f59e'
        name:
          type: string
          example: 'My Deck!'
        cover_image:
          type: string
          format: url
          example: 'https://cards.scryfall.io/art_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
        likes:
          type: number
          minimum: 0
        dislikes:
          type: number
          minimum: 0
        views:
          type: number
          minimum: 0
        format:
          type: string
          example: 'standard'
        editors:
          type: array
          items:
            type: string
            example: '1103efb6-b3db-409b-951f-896efa60f59e'
        created_date:
          type: date-time
        modified_date:
          type: date-time
    Deck:
      type: object
      required:
       - id
       - name
       - mainbaord
       - sideboard
       - considering
       - likes
       - dislikes
       - views
       - cover_image
       - editors
       - created_date
       - modified_date
      properties:
        id:
          type: string
          format: guid
          example: '1103efb6-b3db-409b-951f-896efa60f59e'
        editors:
          type: array
          items:
            type: string
            example: '1103efb6-b3db-409b-951f-896efa60f59e'
        name:
          type: string
          example: 'My Deck!'
        format:
          type: string
          example: 'standard'
        mainboard:
          type: array
          items:
            $ref: '#/components/schemas/CardDeckResponse'
        sideboard:
          type: array
          items:
            $ref: '#/components/schemas/CardDeckResponse'
        considering:
          type: array
          items:
            $ref: '#/components/schemas/CardDeckResponse'
        likes:
          type: number
          minimum: 0
        dislikes:
          type: number
          minimum: 0
        views:
          type: number
          minimum: 0
        description:
          type: string
          maxLength: 100000
        cover_image:
          type: string
          format: url
          example: 'https://cards.scryfall.io/art_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
        commander_1:
          type: string
        commander_2:
          type: string
        created_date:
          type: date-time
        modified_date:
          type: date-time
        privacy:
          type: string
          example: 'public'
    DeckCreationRequest:
      type: object
      required:
       - id
       - name
       - mainbaord
       - sideboard
       - considering
       - likes
       - dislikes
       - views
       - cover_image
       - editors
      properties:
        id:
          type: string
          format: guid
          example: '1103efb6-b3db-409b-951f-896efa60f59e'
        editors:
          type: array
          items:
            type: string
            example: '1103efb6-b3db-409b-951f-896efa60f59e'
        name:
          type: string
          example: 'My Deck!'
        format:
          type: string
          example: 'standard'
        mainboard:
          type: array
          items:
            schema:
              type: string
              format: guid
        sideboard:
          items:
            schema:
              type: string
              format: guid
        considering:
          items:
            schema:
              type: string
              format: guid
        description:
          type: string
          maxLength: 100000
        cover_image:
          type: string
          format: url
          example: 'https://cards.scryfall.io/art_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
        commander_1:
          type: string
        commander_2:
          type: string
    CardDeckResponse:
      type: object
      required:
       - number
       - Card
      properties:
        number:
          type: number
          minimum: 1
        CardInfo:
          $ref: '#/components/schemas/CardInfo'
    CardInfo:
      type: object
      required:
       - name
       - id
       - cmc
       - type_line
       - image_uris
      properties:
        name: 
          type: string
        id:
          type: string
          format: guid
          example: '1103efb6-b3db-409b-951f-896efa60f59e'
        mana_cost:
          type: string
          format: mc
          example: '{4}{W}{W}'
          pattern: '(\d|[WUBRG])+'
        cmc:
          type: number
          minimum: 0
        type_line:
          type: string
          example: 'Sorcery'
        image_uris:
          type: array
          items:
            type: object
            properties:
              small:
                type: string
                format: url
                example: 'https://cards.scryfall.io/small/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              normal:
                type: string
                format: url
                example: 'https://cards.scryfall.io/normal/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              large:
                type: string
                format: url
                example: 'https://cards.scryfall.io/large/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              png:
                type: string
                format: url
                example: 'https://cards.scryfall.io/png/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.png?1706240553'
              art_crop:
                type: string
                format: url
                example: 'https://cards.scryfall.io/art_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              border_crop:
                type: string
                format: url
                example: 'https://cards.scryfall.io/border_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
    Card:
      type: object
      required:
       - id
       - oracle_id
       - name
       - uri
       - cmc
       - legalities
       - artist
      properties:
        id:
          type: string
          format: guid
          example: '1103efb6-b3db-409b-951f-896efa60f59e'
        oracle_id:
          type: string
          format: guid
          example: '1103efb6-b3db-409b-951f-896efa60f59e'
        multiverse_ids:
          type: array
          items:
            type: string
            format: guid
            example: '1103efb6-b3db-409b-951f-896efa60f59e'
        tcgplayer_id:
          type: number
          minimum: 0
        cardmarket_id:
          type: number
          minimum: 0
        name:
          type: string
          example: 'Austere Command'
        lang:
          type: string
          example: 'en'
        release_at:
          type: string
          format: date
          example: '2024-02-16'
        uri:
          type: string
          format: url
          example: 'https://api.scryfall.com/cards/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b'
        scryfall_uri:
          type: string
          format: url
          example: 'https://scryfall.com/card/mkc/56/austere-command?utm_source=api'
        layout:
          type: string
          example: 'normal'
        highres_image:
          type: boolean
        image_status:
          type: string
          example: 'high_res_scan'
        image_uris:
          type: array
          items:
            type: object
            properties:
              small:
                type: string
                format: url
                example: 'https://cards.scryfall.io/small/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              normal:
                type: string
                format: url
                example: 'https://cards.scryfall.io/normal/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              large:
                type: string
                format: url
                example: 'https://cards.scryfall.io/large/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              png:
                type: string
                format: url
                example: 'https://cards.scryfall.io/png/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.png?1706240553'
              art_crop:
                type: string
                format: url
                example: 'https://cards.scryfall.io/art_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
              border_crop:
                type: string
                format: url
                example: 'https://cards.scryfall.io/border_crop/front/a/3/a31ffc9e-d21b-4a8f-ac67-695e38e09e3b.jpg?1706240553'
        mana_cost:
          type: string
          format: mc
          example: '{4}{W}{W}'
          pattern: '(\d|[WUBRG])+'
        cmc:
          type: number
          minimum: 0
        power:
          type: number
        toughness:
          type: number
        type_line:
          type: string
          example: 'Sorcery'
        colors:
          type: array
          items:
            type: string
            example: 'B'
            pattern: '[WUBRG]'
        color_identity:
          type: array
          items:
            type: string
            example: 'B'
            pattern: '[WUBRG]'
        keywords:
          type: array
          items:
            type: string
            example: 'Treasure'
        legalities:
          type: array
          items:
            type: string
            example: '"standard": "legal"'
            pattern: '"\w+": "\w+"'
        games:
          type: array
          items:
            type: string
            example: 'mtgo'
        reserved:
          type: boolean
        foil:
          type: boolean
        nonfoil:
          type: boolean
        finishes:
          type: array
          items:
            type: string
        oversized:
          type: boolean
        promo:
          type: boolean
        reprint:
          type: boolean
        variation:
          type: boolean
        set_id:
         type: string
         format: guid
         example: 'a944551a-73fa-41cd-9159-e8d0e4674403'
        set:
          type: string
          example: 'vma'
          pattern: '\w\w\w'
        set_name:
          type: string
          example: "Vintage Masters"
        set_type:
          type: string
          example: 'masters'
        rarity: 
          type: string
          example: 'common'
        artist:
          type: string
          example: 'Chris Rahn'
  securitySchemes:
    deckmanagement_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:dekcs: modify decks in your account
            read:decks: read your privated decks
    usermanagement_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: temp
          scopes:
            manage:users: manage Users
    api_key:
      type: apiKey
      name: api_key
      in: header